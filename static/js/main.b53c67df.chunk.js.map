{"version":3,"sources":["models/mnist.ts","data/data.ts","components/Canvas/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["train","model","data","a","metrics","container","name","styles","height","fitCallbacks","tfvis","tf","d","nextTrainBatch","xs","reshape","labels","trainXs","trainYs","nextTestBatch","testXs","testYs","fit","batchSize","validationData","epochs","shuffle","callbacks","IMAGE_SIZE","NUM_CLASSES","NUM_DATASET_ELEMENTS","NUM_TRAIN_ELEMENTS","Math","floor","TRAIN_TEST_RATIO","NUM_TEST_ELEMENTS","MnistData","shuffledTrainIndex","shuffledTestIndex","datasetLabels","trainIndices","testIndices","trainImages","datasetImages","testImages","trainLabels","testLabels","this","img","Image","canvas","document","createElement","ctx","getContext","imgRequest","Promise","resolve","reject","crossOrigin","onload","width","naturalWidth","naturalHeight","datasetBytesBuffer","ArrayBuffer","chunkSize","i","datasetBytesView","Float32Array","drawImage","imageData","getImageData","j","length","src","labelsRequest","fetch","all","labelsResponse","Uint8Array","arrayBuffer","createShuffledIndices","slice","nextBatch","index","batchImagesArray","batchLabelsArray","idx","image","set","label","pos","x","y","Canvas","React","color","setColor","canvasRef","rawImage","getElementById","console","log","add","conv2d","inputShape","kernelSize","filters","activation","maxPooling2d","poolSize","flatten","dense","units","compile","optimizer","adam","loss","getModel","run","load","modelSummary","current","fillStyle","fillRect","setPosition","e","clientX","offsetLeft","clientY","offsetTop","draw","buttons","beginPath","lineWidth","lineCap","strokeStyle","moveTo","lineTo","stroke","toDataURL","className","onClick","style","clearRect","icon","faEraser","size","ref","id","onMouseDown","onMouseEnter","onMouseMove","raw","fromPixels","tensor","resizeBilinear","expandDims","prediction","predict","pIndex","dataSync","alert","faCheckSquare","faTrain","display","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.b53c67df.chunk.js","sourcesContent":["import * as tf from '@tensorflow/tfjs'\nimport { MnistData } from '../data/data';\nimport * as tfvis from '@tensorflow/tfjs-vis'\n\nexport const getModel = () => {\n    const model = tf.sequential();\n\n    model.add(tf.layers.conv2d({ inputShape: [28, 28, 1], kernelSize: 3, filters: 8, activation: 'relu' }));\n    model.add(tf.layers.maxPooling2d({ poolSize: [2, 2] }));\n    model.add(tf.layers.conv2d({ filters: 16, kernelSize: 3, activation: 'relu' }));\n    model.add(tf.layers.maxPooling2d({ poolSize: [2, 2] }));\n    model.add(tf.layers.flatten());\n    model.add(tf.layers.dense({ units: 128, activation: 'relu' }));\n    model.add(tf.layers.dense({ units: 10, activation: 'softmax' }));\n\n    model.compile({ optimizer: tf.train.adam(), loss: 'categoricalCrossentropy', metrics: ['accuracy'] });\n\n    return model;\n}\n\nexport const train = async (model: tf.Sequential, data: MnistData) => {\n    const metrics = ['loss', 'val_loss', 'accuracy', 'val_accuracy'];\n    const container = { name: 'Model Training', styles: { height: '640px' } };\n    const fitCallbacks = tfvis.show.fitCallbacks(container, metrics);\n\n    const BATCH_SIZE = 512;\n    const TRAIN_DATA_SIZE = 5500;\n    const TEST_DATA_SIZE = 1000;\n\n    const [trainXs, trainYs] = tf.tidy(() => {\n        const d = data.nextTrainBatch(TRAIN_DATA_SIZE);\n        return [\n            d.xs.reshape([TRAIN_DATA_SIZE, 28, 28, 1]),\n            d.labels\n        ];\n    });\n\n    const [testXs, testYs] = tf.tidy(() => {\n        const d = data.nextTestBatch(TEST_DATA_SIZE);\n        return [\n            d.xs.reshape([TEST_DATA_SIZE, 28, 28, 1]),\n            d.labels\n        ];\n    });\n\n    return model.fit(trainXs, trainYs, {\n        batchSize: BATCH_SIZE,\n        validationData: [testXs, testYs],\n        epochs: 20,\n        shuffle: true,\n        callbacks: fitCallbacks\n\n    });\n}\n","import * as tf from '@tensorflow/tfjs'\n\nconst IMAGE_SIZE = 784;\nconst NUM_CLASSES = 10;\nconst NUM_DATASET_ELEMENTS = 65000;\n\nconst TRAIN_TEST_RATIO = 5 / 6;\n\nconst NUM_TRAIN_ELEMENTS = Math.floor(TRAIN_TEST_RATIO * NUM_DATASET_ELEMENTS);\nconst NUM_TEST_ELEMENTS = NUM_DATASET_ELEMENTS - NUM_TRAIN_ELEMENTS;\n\nconst MNIST_IMAGES_SPRITE_PATH =\n    'https://storage.googleapis.com/learnjs-data/model-builder/mnist_images.png';\nconst MNIST_LABELS_PATH =\n    'https://storage.googleapis.com/learnjs-data/model-builder/mnist_labels_uint8';\n\n/**\n * A class that fetches the sprited MNIST dataset and returns shuffled batches.\n *\n * NOTE: This will get much easier. For now, we do data fetching and\n * manipulation manually.\n */\nexport class MnistData {\n    shuffledTrainIndex: number;\n    shuffledTestIndex: number;\n    datasetLabels!: any;\n    trainIndices!: any;\n    testIndices!: any;\n    trainImages: any;\n    datasetImages: any;\n    testImages: any;\n    trainLabels!: any;\n    testLabels!: any;\n    constructor() {\n        this.shuffledTrainIndex = 0;\n        this.shuffledTestIndex = 0;\n    }\n\n    async load() {\n        // Make a request for the MNIST sprited image.\n        const img = new Image();\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        const imgRequest = new Promise<void>((resolve, reject) => {\n            img.crossOrigin = '';\n            img.onload = () => {\n                img.width = img.naturalWidth;\n                img.height = img.naturalHeight;\n\n                const datasetBytesBuffer =\n                    new ArrayBuffer(NUM_DATASET_ELEMENTS * IMAGE_SIZE * 4);\n\n                const chunkSize = 5000;\n                canvas.width = img.width;\n                canvas.height = chunkSize;\n\n                for (let i = 0; i < NUM_DATASET_ELEMENTS / chunkSize; i++) {\n                    const datasetBytesView = new Float32Array(\n                        datasetBytesBuffer, i * IMAGE_SIZE * chunkSize * 4,\n                        IMAGE_SIZE * chunkSize);\n                    ctx?.drawImage(\n                        img, 0, i * chunkSize, img.width, chunkSize, 0, 0, img.width,\n                        chunkSize);\n\n                    const imageData = ctx?.getImageData(0, 0, canvas.width, canvas.height);\n\n                    for (let j = 0; j < imageData!.data.length / 4; j++) {\n                        // All channels hold an equal value since the image is grayscale, so\n                        // just read the red channel.\n                        datasetBytesView[j] = imageData!.data[j * 4] / 255;\n                    }\n                }\n                this.datasetImages = new Float32Array(datasetBytesBuffer);\n\n                resolve();\n            };\n            img.src = MNIST_IMAGES_SPRITE_PATH;\n        });\n\n        const labelsRequest = fetch(MNIST_LABELS_PATH);\n        const [imgResponse, labelsResponse] =\n            await Promise.all([imgRequest, labelsRequest]);\n\n        this.datasetLabels = new Uint8Array(await labelsResponse.arrayBuffer());\n\n        // Create shuffled indices into the train/test set for when we select a\n        // random dataset element for training / validation.\n        this.trainIndices = tf.util.createShuffledIndices(NUM_TRAIN_ELEMENTS);\n        this.testIndices = tf.util.createShuffledIndices(NUM_TEST_ELEMENTS);\n\n        // Slice the the images and labels into train and test sets.\n        this.trainImages =\n            this.datasetImages.slice(0, IMAGE_SIZE * NUM_TRAIN_ELEMENTS);\n        this.testImages = this.datasetImages.slice(IMAGE_SIZE * NUM_TRAIN_ELEMENTS);\n        this.trainLabels =\n            this.datasetLabels.slice(0, NUM_CLASSES * NUM_TRAIN_ELEMENTS);\n        this.testLabels =\n            this.datasetLabels.slice(NUM_CLASSES * NUM_TRAIN_ELEMENTS);\n    }\n\n    nextTrainBatch(batchSize: any) {\n        return this.nextBatch(\n            batchSize, [this.trainImages, this.trainLabels], () => {\n                this.shuffledTrainIndex =\n                    (this.shuffledTrainIndex + 1) % this.trainIndices.length;\n                return this.trainIndices[this.shuffledTrainIndex];\n            });\n    }\n\n    nextTestBatch(batchSize: any) {\n        return this.nextBatch(batchSize, [this.testImages, this.testLabels], () => {\n            this.shuffledTestIndex =\n                (this.shuffledTestIndex + 1) % this.testIndices.length;\n            return this.testIndices[this.shuffledTestIndex];\n        });\n    }\n\n    nextBatch(batchSize: number, data: any[], index: { (): number; (): number; (): any; }) {\n        const batchImagesArray = new Float32Array(batchSize * IMAGE_SIZE);\n        const batchLabelsArray = new Uint8Array(batchSize * NUM_CLASSES);\n\n        for (let i = 0; i < batchSize; i++) {\n            const idx = index();\n\n            const image =\n                data[0].slice(idx * IMAGE_SIZE, idx * IMAGE_SIZE + IMAGE_SIZE);\n            batchImagesArray.set(image, i * IMAGE_SIZE);\n\n            const label =\n                data[1].slice(idx * NUM_CLASSES, idx * NUM_CLASSES + NUM_CLASSES);\n            batchLabelsArray.set(label, i * NUM_CLASSES);\n        }\n\n        const xs = tf.tensor2d(batchImagesArray, [batchSize, IMAGE_SIZE]);\n        const labels = tf.tensor2d(batchLabelsArray, [batchSize, NUM_CLASSES]);\n\n        return { xs, labels };\n    }\n}","import * as React from 'react'\nimport * as tf from '@tensorflow/tfjs'\nimport * as tfvis from '@tensorflow/tfjs-vis'\n\nimport './style.css'\nimport { getModel, train } from '../../models/mnist'\nimport { MnistData } from '../../data/data'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faAllergies, faCheckSquare, faEraser, faBaby, faTrain } from '@fortawesome/free-solid-svg-icons'\n\ninterface CanvasProps {\n    width: number;\n    height: number;\n    color: string;\n}\nlet pos = { x: 0, y: 0 };\n\nexport const Canvas = ({ width, height }): JSX.Element => {\n    const [drawing, setDrawing] = React.useState<boolean>(false)\n    const [color, setColor] = React.useState<string>(\"#fff\")\n    const canvasRef = React.useRef<HTMLCanvasElement>(null)\n    let rawImage = document.getElementById('canvasimg') as HTMLImageElement\n    console.log(rawImage)\n    const ctx = React.useRef<any>()\n    let model: any;\n\n\n    model = getModel()\n\n    const run = async () => {\n        console.log(\"starting\")\n        const data = new MnistData();\n        await data.load();\n\n        console.log('data loaded')\n        tfvis.show.modelSummary({ name: 'Model Architecture' }, model);\n\n        await train(model, data);\n        console.log(\"training done\")\n        console.log(\"hello\")\n    }\n\n    React.useEffect(() => {\n        ctx.current = canvasRef?.current?.getContext('2d')\n        ctx.current.fillStyle = \"black\"\n        ctx.current.fillRect(0, 0, width, height)\n        console.log(\"Hello\")\n    }, [])\n\n    const clearCanvas = () => {\n        ctx.current.clearRect(0, 0, width, height)\n        ctx.current.fillStyle = \"black\"\n        ctx.current.fillRect(0, 0, width, height)\n    }\n\n    const predict = () => {\n        let raw = tf.browser.fromPixels(rawImage, 1);\n        let resized = tf.image.resizeBilinear(raw, [28, 28]);\n        let tensor = resized.expandDims(0);\n        let prediction = model.predict(tensor);\n        let pIndex = tf.argMax(prediction, 1).dataSync();\n        console.log(prediction)\n        console.log(pIndex)\n        alert(pIndex);\n    }\n    // const handleSubmit = () => {\n    //     rawImage.src = canvasRef.current.toDataURL('image/png');\n\n    // }\n\n\n    const setPosition = (e: any) => {\n        pos.x = e.clientX - canvasRef.current.offsetLeft;\n        pos.y = e.clientY - canvasRef.current.offsetTop;\n\n    }\n    const draw = (e: any) => {\n        if (e.buttons != 1) return;\n        rawImage = document.getElementById('canvasimg') as HTMLImageElement\n\n        if (rawImage) {\n            ctx.current.beginPath();\n            ctx.current.lineWidth = 24;\n            ctx.current.lineCap = 'round';\n            ctx.current.strokeStyle = 'white';\n            ctx.current.moveTo(pos.x, pos.y);\n            setPosition(e);\n            ctx.current.lineTo(pos.x, pos.y);\n            ctx.current.stroke();\n            rawImage.src = canvasRef.current.toDataURL('image/png');\n        }\n\n    }\n    const handleMouseMove = (e: any) => {\n        draw(e)\n        // if (canvasRef.current) {\n        //     const coords = [\n        //         e.clientX - canvasRef.current.offsetLeft,\n        //         e.clientY - canvasRef.current.offsetTop\n        //     ]\n        //     if (drawing) {\n        //         ctx.current.lineTo(...coords)\n        //         ctx.current.stroke()\n        //     }\n        //     // handleMouseMove(...coords)\n        // }\n    }\n\n    // const startDrawing = (e: any) => {\n    //     if (canvasRef.current) {\n\n    //         ctx.current.lineJoin = \"round\"\n    //         ctx.current.lineCap = 'round'\n    //         ctx.current.lineWidth = 10\n    //         ctx.current.strokeStyle = color\n    //         ctx.current.beginPath();\n    //         // actual coordinates\n    //         ctx.current.moveTo(\n    //             e.clientX - canvasRef.current.offsetLeft,\n    //             e.clientY - canvasRef.current.offsetTop\n    //         )\n\n    //         setDrawing(true)\n    //     }\n    // }\n\n    // const stopDrawing = (e: any) => {\n    //     ctx.current.closePath()\n    //     rawImage.src = canvasRef.current.toDataURL('image/png');\n\n    //     setDrawing(false)\n\n    // }\n    return (\n        <div className=\"app-box\">\n\n            <div className=\"canvas-container\">\n                <div className=\"color-picker\">\n                    <div className=\"color-pick\" onClick={() => setColor(\"#fff\")} style={color === \"#fff\" ? { 'transform': 'scale(1.3)' } : {}}></div>\n                    <div className=\"color-pick black-color\" onClick={() => setColor(\"black\")} style={color === \"black\" ? { 'transform': 'scale(1.3)' } : {}}></div>\n                    <div className=\"eraser\" onClick={clearCanvas}>\n                        <FontAwesomeIcon icon={faEraser} size=\"2x\" />\n                    </div>\n                </div>\n\n                <canvas\n                    ref={canvasRef}\n                    id=\"canvas\"\n                    width={width}\n                    height={height}\n                    onMouseDown={setPosition}\n                    // onMouseUp={stopDrawing}\n                    onMouseEnter={setPosition}\n                    // onMouseOut={stopDrawing}\n                    onMouseMove={draw}\n                />\n\n                <div className=\"bottom-bar\">\n                    <div className=\"submit\" onClick={predict}>\n                        <FontAwesomeIcon icon={faCheckSquare} size=\"2x\" />\n                    </div>\n                    <div className=\"submit\" onClick={run}>\n                        <FontAwesomeIcon icon={faTrain} size=\"2x\" />\n                    </div>\n                </div>\n            </div>\n            <img id=\"canvasimg\" style={{ display: \"none\" }} width={280} height={280} />\n\n        </div>\n    )\n}","import * as  React from 'react';\nimport * as tf from '@tensorflow/tfjs'\nimport * as tfvis from '@tensorflow/tfjs-vis'\nimport { MnistData } from './data/data';\n\nimport './App.css';\nimport { Canvas } from './components/Canvas';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEraser, faCheckSquare, faAllergies } from '@fortawesome/free-solid-svg-icons'\nimport { getModel, train } from './models/mnist'\n\n// import { Canvas } from './components/Canvas';\n\n\nfunction App() {\n\n  return (\n    <div>\n      <Canvas height={600} width={600}></Canvas>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}